// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.subsystems;

import org.usfirst.frc319.RobotMap;
import org.usfirst.frc319.Robot;
import org.usfirst.frc319.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.ControlMode;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Elevator extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Ultrasonic leftToteDetector = RobotMap.elevatorLeftToteDetector;
    Ultrasonic rightToteDetector = RobotMap.elevatorRightToteDetector;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	CANTalon elevatorMotorLead =  RobotMap.elevatorMotorLead;
	CANTalon elevatorMotorFollow =  RobotMap.elevatorMotorFollow;
    
	
	double p = 2.0;
	double i = 0.01;
	double d = 5;
	double f = 0.0001;
	
	int iZone = 100;
	double rampRate = 36;
	int upProfile = 0;
	
	double toteDetectionThreshold = 2.0;
	
	public double numberOfTotesPossessed = 0;
	
	//.setPID(5, 0, 0);
	
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	public Elevator(){
		elevatorMotorLead.changeControlMode(ControlMode.Position);
		elevatorMotorLead.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		elevatorMotorLead.setPID(p, i , d, f, iZone, rampRate, upProfile);
		elevatorMotorLead.reverseSensor(false);
		elevatorMotorLead.reverseOutput(true);
		elevatorMotorLead.setProfile(upProfile);
		elevatorMotorFollow.changeControlMode(CANTalon.ControlMode.Follower);
		elevatorMotorFollow.set(elevatorMotorLead.getDeviceID());
		
		elevatorMotorLead.enableLimitSwitch(true, true);
	
		//rightToteDetector.setEnabled(true);
    	//leftToteDetector.setEnabled(true);
    	rightToteDetector.setAutomaticMode(true);
    	leftToteDetector.setAutomaticMode(true);
	}
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new ElevatorDisplay());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	
    	
    	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void printEncoder(){
    	
    	//System.out.println("EncoderError = "+ elevatorMotorLead.getClosedLoopError());
    	//System.out.println("EncPos= "+ elevatorMotorLead.getEncPosition());
    	//System.out.println("Is Top switch closed? = "+elevatorMotorLead.isFwdLimitSwitchClosed());
    	//System.out.println("Is Bottom switch closed? = " + elevatorMotorLead.isRevLimitSwitchClosed());
    	
    }
    public void floorPickUpPosition(){
    	elevatorMotorLead.set(0);
    }
    public void liftedTotePosition(){
    	elevatorMotorLead.set(3200);
    }
    public void driveElevatorDown(double counter){
    	elevatorMotorLead.set(counter);
    }
    
    
    public boolean isfinished(){
    	double error = elevatorMotorLead.getEncPosition()-elevatorMotorLead.getSetpoint();
    	//System.out.println("Setpoint = "+ elevatorMotorLead.getSetpoint());
    	
    	//int error = elevatorMotorLead.getClosedLoopError();
    	if (error<25&& error>-25){
    	//	System.out.println("Acheived Position, Error =" + error);
    		return true;
    	}else{
    		//System.out.println("Position Not Reached, Error = "+ error);
    		return false;
    	
    	}
    }
    
    public void resetEncoder(){
    	elevatorMotorLead.setPosition(0);
    }
    public void disableCAN(){
    	elevatorMotorLead.disable();
    }
    public void enableCAN(){
    	elevatorMotorLead.enableControl();
    }
   // public boolean HomeBase(){
    	 
    //}
    public boolean topLimitSwitch(){
    	return elevatorMotorLead.isFwdLimitSwitchClosed();
    	//false is open true is closed
    }
    public boolean bottomLimitSwitch(){
    	return elevatorMotorLead.isRevLimitSwitchClosed();
    	//false is open true is closed
    }
    public int encoderPosition(){
    	return Robot.elevator.elevatorMotorLead.getEncPosition();
    }
    public void placeToteHeight(){
    	elevatorMotorLead.set(2500);
    }
    public boolean isToteReady(){
    	if (leftToteDetector.getRangeInches() < toteDetectionThreshold && rightToteDetector.getRangeInches() < toteDetectionThreshold){
    		return true;
    	}else{
    		return false;
    	}
    }
    public void printDetectorValues(){
    	
    	double rightToteDistance = rightToteDetector.getRangeInches();
    	double leftToteDistance = leftToteDetector.getRangeInches();
    	boolean detected = isToteReady();
    	System.out.println("LeftRF= "+ leftToteDistance + " RightRF= "+ rightToteDistance + " Detected= "+ detected);
    	//System.out.print(rightToteDistance);
    }
    public void enableDetectors(){
    	//rightToteDetector.setEnabled(true);
    	//leftToteDetector.setEnabled(true);
    	//rightToteDetector.setAutomaticMode(true);
    	//leftToteDetector.setAutomaticMode(true);
    }
    
}

